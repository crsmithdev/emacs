* Bootstrapping
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(require 'cl)
#+END_SRC

* Global Settings
#+BEGIN_SRC emacs-lisp
(use-package better-defaults
  :ensure t)

(setq user-full-name "Chris Smith"
      user-mail-address "crsmithdev@gmail.com"
      inhibit-splash-screen t
      initial-scratch-message nil
      backup-directory-alist '(("." . (concat user-emacs-directory "backups")))
      ;backup-directory-alist '(("." . "~/.emacs.d/backups"))
      ring-bell-function 'ignore
      visible-bell t)
      
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
(prefer-coding-system 'utf-8)
(column-number-mode 1)
(fset 'yes-or-no-p 'y-or-n-p)
(desktop-save-mode 1)
#+END_SRC

* Essentials
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1))
#+END_SRC

** GUI & Theme
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(ns-appearance . dark))
(add-to-list 'default-frame-alist '(font . "Source Code Pro-12" ))
(set-face-attribute 'default t :font "Source Code Pro-12" )
(set-face-attribute 'default nil :font "Source Code Pro-12" )
(set-frame-font "Source Code Pro-12" nil t)

(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-vibrant t)
  (doom-themes-org-config))
#+END_SRC

* Configuration
** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** Nlinum
#+BEGIN_SRC emacs-lisp
(use-package nlinum-relative
  :ensure t
  :config
  (nlinum-relative-setup-evil)
  (add-hook 'prog-mode-hook 'nlinum-relative-mode)
  (setq nlinum-relative-redisplay-delay 0)
  (setq nlinum-relative-current-symbol "")
  (global-nlinum-relative-mode))
#+END_SRC

** Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
(setq org-log-done t)
(setq org-startup-indented t)
(setq org-capture-templates '(("t" "Todo" entry
                               (file+headline "~/org/notes.org" "Tasks")
                               "* TODO %i%?\n%U")))
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(setq-default mode-line-format
              '("%e"
                mode-line-front-space
                mode-line-mule-info
                mode-line-client
                mode-line-modified
                mode-line-remote
                mode-line-frame-identification
                mode-line-buffer-identification
                "   "
                mode-line-position
                evil-mode-line-tag
                (vc-mode vc-mode)
                "  "
                mode-line-modes
                mode-line-misc-info
                mode-line-end-spaces))
#+END_SRC

** Bindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-m" 'execute-extended-command)
#+END_SRC

** Custom
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/package-selected-packages.el")
(load custom-file)
#+END_SRC
